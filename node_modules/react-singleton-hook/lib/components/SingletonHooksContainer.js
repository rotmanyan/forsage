"use strict";

exports.__esModule = true;
exports.resetLocalStateForTests = exports.addHook = exports.SingletonHooksContainer = void 0;

var _react = _interopRequireWildcard(require("react"));

var _SingleItemContainer = require("./SingleItemContainer");

var _env = require("../utils/env");

var _warning = require("../utils/warning");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var SingletonHooksContainerMounted = false;
var SingletonHooksContainerRendered = false;
var SingletonHooksContainerMountedAutomatically = false;
var mountQueue = [];

var mountIntoContainerDefault = function mountIntoContainerDefault(item) {
  mountQueue.push(item);
};

var mountIntoContainer = mountIntoContainerDefault;

var SingletonHooksContainer = function SingletonHooksContainer() {
  SingletonHooksContainerRendered = true;
  (0, _react.useEffect)(function () {
    if (SingletonHooksContainerMounted) {
      (0, _warning.warning)('SingletonHooksContainer is mounted second time. ' + 'You should mount SingletonHooksContainer before any other component and never unmount it.' + 'Alternatively, dont use SingletonHooksContainer it at all, we will handle that for you.');
    }

    SingletonHooksContainerMounted = true;
    return function () {
      return process.env.NODE_ENV !== 'test' && (0, _warning.warning)('SingletonHooksContainer is removed from DOM. its not supported, singleton hooks will stop updating.');
    };
  }, []);

  var _useState = (0, _react.useState)([]),
      hooks = _useState[0],
      setHooks = _useState[1];

  (0, _react.useEffect)(function () {
    mountIntoContainer = function mountIntoContainer(item) {
      return setHooks(function (hooks) {
        return [].concat(hooks, [item]);
      });
    };

    setHooks(mountQueue);
  }, []);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, hooks.map(function (h, i) {
    return /*#__PURE__*/_react["default"].createElement(_SingleItemContainer.SingleItemContainer, _extends({}, h, {
      key: i
    }));
  }));
};

exports.SingletonHooksContainer = SingletonHooksContainer;

var addHook = function addHook(hook) {
  if (!SingletonHooksContainerRendered && !SingletonHooksContainerMountedAutomatically) {
    SingletonHooksContainerMountedAutomatically = true;
    (0, _env.mount)(SingletonHooksContainer);
  }

  mountIntoContainer(hook);
};

exports.addHook = addHook;

var resetLocalStateForTests = function resetLocalStateForTests() {
  SingletonHooksContainerMounted = false;
  SingletonHooksContainerRendered = false;
  SingletonHooksContainerMountedAutomatically = false;
  mountQueue = [];
  mountIntoContainer = mountIntoContainerDefault;
};

exports.resetLocalStateForTests = resetLocalStateForTests;